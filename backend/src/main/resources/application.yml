spring:
  profiles:
    default: dev

  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
    database-platform: org.hibernate.dialect.MySQL8Dialect

  jackson:
    time-zone: Asia/Seoul

  kafka:
    producer:
      bootstrap-servers:
        - ${kafka.server.kafka1}
        - ${kafka.server.kafka2}
        - ${kafka.server.kafka3}
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      bootstrap-servers:
        - ${kafka.server.kafka1}
        - ${kafka.server.kafka2}
        - ${kafka.server.kafka3}
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring:
          deserializer:
            key:
              delegate:
                class: org.apache.kafka.common.serialization.LongDeserializer
            value:
              delegate:
                class: org.springframework.kafka.support.serializer.JsonDeserializer
          json:
            trusted:
              packages: com.pppppp.amadda.alarm.dto.topic, com.pppppp.amadda.alarm.dto.topic.alarm, com.pppppp.amadda.alarm.dto.topic.setting
      group-id: ${kafka.group}
      auto-offset-reset: latest
    streams:
      replication-factor: 2
    topic:
      sse: "${kafka.prefix}.reload.schedule"
      alarm:
        friend-request: "${kafka.prefix}.alarm.friend-request"
        friend-accept: "${kafka.prefix}.alarm.friend-accept"
        schedule-assigned: "${kafka.prefix}.alarm.schedule-assigned"
        mentioned: "${kafka.prefix}.alarm.mentioned"
        schedule-update: "${kafka.prefix}.alarm.schedule-update"
        schedule-notification: "${kafka.prefix}.alarm.schedule-notification"

  jwt:
    secret-key: ${jwt.secret-key}
    access-length: ${jwt.access-length}
    refresh-length: ${jwt.refresh-length}

logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql: trace

server:
  port: 8080

cloud:
  aws:
    s3:
      bucket: ${amadda-s3.bucket}
    credentials:
      access-key: ${amadda-s3.access}
      secret-key: ${amadda-s3.secret}
    region:
      static: ${amadda-s3.region}
      auto: false
    stack:
      auto: false
---
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    hibernate:
      ddl-auto: none
    defer-datasource-initialization: true

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${aws.rds.prod.url}
    username: ${aws.rds.prod.username}
    password: ${aws.rds.prod.password}

schedules:
  cron:
    schedule-notification: "0 0/10 * * * ?"
---
spring:
  config:
    activate:
      on-profile: dev

  jpa:
    hibernate:
      ddl-auto: update
    defer-datasource-initialization: true

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${mysql.url}
    username: ${mysql.username}
    password: ${mysql.password}

schedules:
  cron:
    schedule-notification: "0 0/10 * * * ?"
---
spring:
  config:
    activate:
      on-profile: test

  kafka:
    listener:
      auto-startup: false

  jpa:
    hibernate:
      ddl-auto: create

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:~/ammada;MODE=MYSQL
    username: sa
    password:

  h2:
    console:
      path: /h2-console
      enabled: true

  sql:
    init:
      mode: never

schedules:
  cron:
    schedule-notification: "0/1 * * * * ?"
